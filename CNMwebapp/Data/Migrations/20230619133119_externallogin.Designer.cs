// <auto-generated />
using System;
using CNMwebapp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CNMwebapp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230619133119_externallogin")]
    partial class externallogin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CNMwebapp.Models.Job", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("WorkersNeeded")
                        .HasColumnType("int");

                    b.HasKey("Uid");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Uid = "de2698a1-a86d-45bc-af5b-09ed262aad66",
                            Date = new DateTime(2023, 6, 26, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Balaton Sound",
                            WorkersNeeded = 6
                        },
                        new
                        {
                            Uid = "824d18d7-64b1-4865-9dfc-325e0105525d",
                            Date = new DateTime(2023, 6, 27, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Balaton Sound",
                            WorkersNeeded = 6
                        },
                        new
                        {
                            Uid = "6293a4e5-9a4c-456c-9ade-5031aa0b5139",
                            Date = new DateTime(2023, 6, 28, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Balaton Sound",
                            WorkersNeeded = 6
                        },
                        new
                        {
                            Uid = "f2dabae9-ae90-4e80-81ac-6a4018f69e04",
                            Date = new DateTime(2023, 6, 29, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Balaton Sound",
                            WorkersNeeded = 6
                        },
                        new
                        {
                            Uid = "d8291a06-19af-4972-98f6-24913b3a1fcf",
                            Date = new DateTime(2023, 6, 30, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Balaton Sound",
                            WorkersNeeded = 6
                        },
                        new
                        {
                            Uid = "3f46c923-4e6c-428b-b472-f2a46d86f18a",
                            Date = new DateTime(2023, 7, 1, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Balaton Sound",
                            WorkersNeeded = 6
                        },
                        new
                        {
                            Uid = "dae168e5-7285-4c54-8c79-3d048f7fc4f0",
                            Date = new DateTime(2023, 7, 10, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "add0d304-e406-4612-8346-02986fb97a19",
                            Date = new DateTime(2023, 7, 11, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "fff9cf56-e898-451a-a261-28922811ebcd",
                            Date = new DateTime(2023, 7, 12, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "9818c6ed-f174-44c1-9e2b-e3eb25f0b7b6",
                            Date = new DateTime(2023, 7, 13, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "b9729777-ba95-4f3e-a3cf-e7424197d56d",
                            Date = new DateTime(2023, 7, 14, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "ce707609-8f65-44aa-bc3f-835e7cade02e",
                            Date = new DateTime(2023, 7, 15, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "d624d0cc-6544-45ed-bc42-54612636db27",
                            Date = new DateTime(2023, 7, 16, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "7e657e51-e045-4763-9f69-c6c24ef44d5b",
                            Date = new DateTime(2023, 7, 17, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "5e6b0da7-e8ad-43df-b925-d4d24594e1fe",
                            Date = new DateTime(2023, 7, 18, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "eeb93d9e-a610-4daf-914d-c3a16cbd97cd",
                            Date = new DateTime(2023, 7, 19, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "707af7d7-bb8e-42ac-9bfb-f9768a3b08d9",
                            Date = new DateTime(2023, 7, 20, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "bd982ff4-09f6-4b33-9c5f-014a6907bfc6",
                            Date = new DateTime(2023, 7, 21, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "43815a88-02df-42da-952f-b349dfeb224c",
                            Date = new DateTime(2023, 7, 22, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "17bf028a-f307-4c5a-9fa6-f319c05d7bcc",
                            Date = new DateTime(2023, 7, 23, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "1272abf1-c0fb-42d1-94f1-7225be75dd45",
                            Date = new DateTime(2023, 7, 24, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "4f881514-d703-4b3c-b898-3e51335900f0",
                            Date = new DateTime(2023, 7, 25, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "8e0ecbc1-e9ad-4893-99ab-19db267a33d1",
                            Date = new DateTime(2023, 7, 26, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "a97724a3-1a84-4aff-a6be-66defe318894",
                            Date = new DateTime(2023, 7, 27, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "129c6d8f-e4e9-462b-845d-d1a3b7cd24ce",
                            Date = new DateTime(2023, 7, 28, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "8a904a98-e201-4fe0-bf43-b4514d3b4a67",
                            Date = new DateTime(2023, 7, 29, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "0e60d4f2-27de-4a7a-b3c8-87c9caf88a32",
                            Date = new DateTime(2023, 7, 30, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "61ae1de6-e593-46b3-bb09-0201e5a65670",
                            Date = new DateTime(2023, 7, 31, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "1b430964-9d76-4e43-bcb5-c2a19e8af04c",
                            Date = new DateTime(2023, 8, 1, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "02e9717c-2c79-4134-b8bb-19d2555eb7df",
                            Date = new DateTime(2023, 8, 2, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "10b762e3-a2f9-4f56-ac6c-818f42895c87",
                            Date = new DateTime(2023, 8, 3, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "3419fddd-f8e8-47c4-97b0-264b89cf7672",
                            Date = new DateTime(2023, 8, 4, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "2a30d4a5-da36-4a2b-a6fb-a3c634438312",
                            Date = new DateTime(2023, 8, 5, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "4a1188a8-0010-4683-91ac-0e98ca364334",
                            Date = new DateTime(2023, 8, 6, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "a3b36e68-14bc-4cad-81d1-baf674f89b8e",
                            Date = new DateTime(2023, 8, 7, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "815d9547-d26b-424a-a850-3473df233f8a",
                            Date = new DateTime(2023, 8, 8, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "d08a6bca-7ed4-4b38-bf84-24882dea5528",
                            Date = new DateTime(2023, 8, 9, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "9534d4e6-5179-4f5e-8fc0-5365c99ed0cd",
                            Date = new DateTime(2023, 8, 10, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "f7050c4b-1fe0-4150-aa98-ead48507b473",
                            Date = new DateTime(2023, 8, 11, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "eebf687a-6796-450f-a062-c48df584d219",
                            Date = new DateTime(2023, 8, 12, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "b18cca93-6d23-41bb-a0a3-4da6d238a9f4",
                            Date = new DateTime(2023, 8, 13, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "2bdc2d6e-29a7-4246-9275-a5b6bd7bb28d",
                            Date = new DateTime(2023, 8, 14, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "6fa2c07f-5381-4815-ab63-fd5b65479f18",
                            Date = new DateTime(2023, 8, 15, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "0953ec43-8ff6-4427-b654-2f73bd738451",
                            Date = new DateTime(2023, 8, 16, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "44b030ef-fc63-4da2-9fd5-7e1fbefba359",
                            Date = new DateTime(2023, 8, 17, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sziget",
                            WorkersNeeded = 8
                        },
                        new
                        {
                            Uid = "e936b9c5-652d-4e82-a693-11edf2ccf06f",
                            Date = new DateTime(2023, 8, 18, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "20.-i tüzijáték",
                            WorkersNeeded = 5
                        },
                        new
                        {
                            Uid = "580ed5fc-935a-4772-856d-63727b0f9daa",
                            Date = new DateTime(2023, 8, 19, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "20.-i tüzijáték",
                            WorkersNeeded = 5
                        },
                        new
                        {
                            Uid = "33facfc3-124c-4e03-adb1-a41e2144ba2b",
                            Date = new DateTime(2023, 8, 20, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "20.-i tüzijáték",
                            WorkersNeeded = 5
                        },
                        new
                        {
                            Uid = "a06cb3c2-a46c-4084-bc0b-c56c06b38786",
                            Date = new DateTime(2023, 8, 21, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "adf3e66d-3d70-4630-9e31-1409ca6291aa",
                            Date = new DateTime(2023, 8, 22, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "b0fc2da8-9838-4d1d-b40f-d994ad265eab",
                            Date = new DateTime(2023, 8, 23, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "90ab46a9-1980-4a04-be80-69ee44070dfc",
                            Date = new DateTime(2023, 8, 24, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "265fa2e2-3273-4906-a846-9e2129341cac",
                            Date = new DateTime(2023, 8, 25, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "d73832c8-63b4-4e8f-a109-69a676135876",
                            Date = new DateTime(2023, 8, 26, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "80b391f5-3b34-436c-85f4-ac0656e1397a",
                            Date = new DateTime(2023, 8, 27, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "0cd5d856-cb96-44b5-8a28-241880d48365",
                            Date = new DateTime(2023, 8, 28, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "4f344ab7-0655-45a2-b37a-699fa5371ddc",
                            Date = new DateTime(2023, 8, 29, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "82ed71e2-817f-4390-bbc6-82cf2e4897bf",
                            Date = new DateTime(2023, 8, 30, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        },
                        new
                        {
                            Uid = "aa83dc3c-1679-4539-8335-4223960cef0c",
                            Date = new DateTime(2023, 8, 31, 7, 15, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlétikai VB",
                            WorkersNeeded = 3
                        });
                });

            modelBuilder.Entity("CNMwebapp.Models.SquadMember", b =>
                {
                    b.Property<int>("SquadMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SquadMemberId"), 1L, 1);

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SquadMemberId");

                    b.HasIndex("JobId");

                    b.HasIndex("WorkerId");

                    b.ToTable("SquadMembers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CNMwebapp.Models.Worker", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("DriversLicence")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("CNMwebapp.Models.SquadMember", b =>
                {
                    b.HasOne("CNMwebapp.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CNMwebapp.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
